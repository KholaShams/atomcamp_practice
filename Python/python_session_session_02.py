# -*- coding: utf-8 -*-
"""Python Session Session 02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SVPeKje3_VFXRGgoicNdtW7Sr25RvXbi

## Arithmetic Operators



* `+` : Addition
*   `-` : Subtraction
*   `*` : Multiplication
*   `/` : Division
*   `//` : Floor Division
*   `% `: Modulus
*   `**` : Exponentiation
"""

num1 = 100
num2 = 13

print("Addition: ", num1 + num2)
print("Subtraction: ", num1 - num2)
print("Multiplication:", num1 * num2)  #num1 x num2
print("Division: ", 10 / 3)

print("Floor Division: ", 10 // 3)

# 10 / 3 = 1

print("Modulus: ", 10 % 3)  #remainder

# power like 2 ^3 = 2 x2 x2 = 8
print("Exponentiation: ", 3 ** 3)

"""### Comparison operators

- less than ( < ) or equal (<=)
- greater than (>)  or equal  ( >=)
- equal (==)
"""

8 < 5

5<=5     # 5<5  OR 5 == 5

10>10

10>=10   #10 > 10 OR 10==10

10 == 10

10 != 5

5 < int("10")

# 5 < 10  # type casting
# check condition whether 5 is less than 10 or not?



"""### Logical operators

- and
- or
- not


- **and**
    - True True = True
    - True False = False
    - False True = False
    - False False = False
    
- **or**
    - True True = True
    - True False = True
    - False True = True
    - False False = False
    
- **not**
    - Not True = False
    - Not False = True
"""

5 < 10 and 10 > 5
# TRUE and TRUE
# TRUE

salary = int(input("Enter your salary: "))
Job_title = input("Enter your job title:(Senior or junior) ").lower()

print(salary > 50000 or Job_title == "senior")

not 30 > 5

10 not in [1,2,3,4,5]

"""## Sequence Data Types

- String
- List
- Tuple

## Other data types
- Set
- Dictionary
"""

#Sequence data types refers to collection of values that can be accessed by it's position.

"""## String

- Collection of characters
- Use single, double or triple quotes.

"""

#Define

name = "Usman"
description ="Usman is intelligent."
bio_data = """line 1
line 2
lin3"""

type(name), type(description), type(bio_data)

"""## indexing

- U S M A N
- 0 1 2 3 4 (positive indexing)
- -5 -4 -3 -2 -1 (negative indexing)
"""

name = "usman"
print(name)

print(name[0])
print(name[1])
print(name[2])
print(name[3])
print(name[4])

print(name[-1])
print(name[-2])
print(name[-3])
print(name[-4])
print(name[-5])

"""## Slicing

fetch a part of the string
"""

print(name)

# variable_name [ starting_index: end_index : steps]

name[0: 5: 1]

name[0: 5: 2]

name[0: 5: 3]

name[::3]

name

name[1::3]

name[-1]   #USMAN

name[-5:]

name[::1]

name[::-1]

name[::-2]

print(name[-3:-2:-1])

# Name = U  S  M   A  N
#       -5 -4  -3 -2  -1

print(name[-1:-2:-1])

print(name)
print(name[:-2:1])

numbers = "123456789"
# fetch odd numbers
print(numbers[::2])
#fetch values divisible by 2 => 2468
print(numbers[1::2])

#fetch values divisible by 2 => 2468

# reverse your name
name = "Mona"
print(name[::-1])

"""## String Manipulation"""

name = "MaimOoNa KhIljI"
name.upper()

name.lower()

name.title()

name.capitalize()

"a"=="A".lower()

"senior ".isalpha()

"9212345".isnumeric()

"9212345a".isalnum()

"hello" + " " + "universe"

"Hello World".split(" ")

"---".join(['Hello', 'World'])

len(" ")

# index
name = "Usman"
name.index("a")

name.index("z")

#find

name = "Usman"
name.find("a")

name.find("z")

del name

name

name ="usman123"
name[-1],type(name[-1])

"""Strings are immutable"""

name = "Usman"
name = "Word"

name[0] = "W"

"""## List

- collection of items or values
- you can store data of any datatype
- Define using [ ]
"""

basket = ["apple", "banana", "orange", "mango"]

random_list = [ "apple",1234, 4.5, True, [1,2,3,4]]

type(random_list[0])

type(random_list[-1])

random_list[::-1]

random_list

# updating a value
random_list[0] = "mango"

"""## add a  new value

- insert: single value at desired location
- append: single value at the end of the list
- extend: add multiple values individually at the end of the list
"""

random_list

# insert => you can insert a new values at your desired location

random_list.insert(2,"Bag")
random_list

# append

random_list.append(["kiwi","potato","tomato",900])
random_list

#extend
random_list.extend(["kiwi","potato","tomato",900])
random_list

basket = ["kiwi","orange","apple","banana"]

basket

basket.append(["potato","tomato"])
basket

basket.pop(2)

basket

len(basket)

basket

basket[3][1][2]

basket

# remove the item based on value
basket.remove("orange")
basket

basket

# Remove the item based on index and prints the deleted value
removed_elements = basket.pop(2)

removed_elements

basket

[1,2,3,4] + [ "a","b","c"]

a = [1,2,3,4]
a.extend([ "a","b","c"])
a

del a

# Can't index the numeric value
a = ["apple",1243]
a[0][0]

a[1][0]



"""## Task

**Ask user to enter his name, age, qualification and store each in different variable.**
"""



"""**Greet a user as Hello ____ ! (use the name variable here that was asked in above question)**"""



"""**convert "7.8964" into int.**"""



"""**Display the Remainder result of 90 divided by 13 using the print() function.**"""



"""**Ask the user for an input, store it in a variable, and then display its data type.**"""



"""**Ask the user for his height, store it in a variable, and check if it is greater than 6.1**"""



"""**numbers = "0123456789". Print odd numbers**"""



"""**Capitilalize each word in "I love python."**"""



"""**Replace my name with your name in given string.**"""

full_name = "My name is Maimoona Khilji"
## Search for Replace function that how it works

"""**Find out the index of the word "P".**

"""

sentence = "I am excited to learn Python"

"""**Reverse the string.**"""

letters = "abcdefghijklmnop"





"""# **All the Best!**"""

