# -*- coding: utf-8 -*-
"""atomcamp DA python session 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12b8ItiGB8eo8fI7x2lEP9MoQ2Axyprcg

imortance of .copy() method for lists, dictionaries, and dataframes
"""

a = [1, 2, 3, 4]

b = a.copy()

print(a)

print(b)

a.append(5)

print(a)

print(b)

# tuple is immutable data structure
a = (1, 2, 3, 4)

b = a

print(a)

print(b)

b += (5, )

print(a)

print(b)

"""Nested for loop"""

fruits = ["mango", "apple", "banana"]
a = -1

for j in fruits:

  for i in j:

    if i == "n":

      a += 1

  a += 1

print(a)

fruits = ["mango", "apple", "banana", "grapes", "watermelon", "guava", "melon"]



print(fruits)

for i in range(len(fruits)): # when index number is needed, use range()
  fruits[i] = fruits[i].capitalize()
print(fruits)

"""for/else

"""

# else is executed only of for loop is completed fully and not broken somewhere in between

a = [1, 2, 9, 4,5,6,7]

for num in a:
  if num == 10:
    print("10 found")
    break
  print(num)
else: # this else is conneted to the for/else
  print("Loop completed. 10 not found")

print(10 in a)

"""zip and innumerate functions"""

fruits = ["mango", "apple", "banana", "grapes", "watermelon", "guava", "melon"]

number = [10, 20, 30, 40, 50, 60, 70]


for i, j in zip(fruits, number):
  print(i, j)

# enumerate gives counter and fruits in tuple format

for i in enumerate(fruits):
  print(i)

print("unpacked version")
for i, j in enumerate(fruits):

  print(i, j)

"""while loop"""

i = 6

while i> 0:
  print(i)
  i -= 1

i = 6

while i > 0:
  i -= 1
  if i==3:
    #break
    continue
  print(i)

"""practice question

while guessing game
"""

tries = 3
answer = 50

while tries != 0:
  user = eval(input("Enter any number of your choice: "))
  if (answer == user):
    print("Hurrayyyy!!!! Y O U   W I N")
    break
  tries -= 1

#answer = 50

import random as rd

answer = rd.randint(0, 100)
guesses = 3
user = int(input("enter num: "))
while user != answer:
  guesses -= 1
  if guesses == 0:
    print("Sorry, you are out of guesses!")
    break
  print("Try again")
  user = int(input("enter num: "))
else:
  print("Hurrayyyy!!!! Y O U   W I N")

"""Functions

"""

def add(a, b):
  return a+b


add(5,6)

100 + add(5, 6) # returning int + int as return give something usable back instead of a nonetype

def full_name(f_name, l_name):
  return (f_name + " " + l_name)

first_name = input("Enter your first name: ")
last_name = input("Enter your last name: ")

full_name(first_name, last_name)

dictionary = {"A": 1, "B": 2, "C": 3}

sum(dictionary.values())

def add(a, b):
  print(a+b)


add(5,6)

100 + add(5,6) # print always gives a none type type object so when used print in function

def sub(a, b):
  if a > 6:
    return a - b
  if b > a:
    return b - a
sub(5,6)

def sub(a, b):
    return a - b
sub(5,6)

f_name, l_name = input("Enter your first and last name: ").split()
print(f_name)
print(l_name)

f_names = input("Enter first names: ").split(",")
print(f_names)

a = [1, 2, 3, 4, 5]

def list_sum(a):
  sum = 0
  for i in a:
    sum += i
  return sum

list_sum(a)

