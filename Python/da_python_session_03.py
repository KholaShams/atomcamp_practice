# -*- coding: utf-8 -*-
"""DA - Python Session 03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14dSoWYi4uKw4CPTT8gUJ2v5jk7ptfzrl

## Tuple

- Sequence or collection of items
- Tuple is immutable
- define using round brackets  ( )
- Tuples are like lists but cannot be changed (no item addition, removal, or modification).
"""

#Create tuple

my_tuple = (1,2,3,4,5)
print(my_tuple)

type(my_tuple)

my_tuple = ("ABC", 123, 3.14, True)
my_tuple

my_tuple[0]

my_tuple[-2]

my_tuple[::-1]

my_tuple.count("ABC")

my_tuple=(1,2,3,4,5,4,4,3,2,2,1,1,1,1,1,5)
my_tuple

my_tuple.count(1)

my_tuple.index(5)

my_tuple = ("ABC","DEF","DEF")
my_tuple

my_tuple.index("DEF")

"ABC" in my_tuple

"""## Set

- Unordered collection of elements..
- Union / intersection / difference or the other mathematical functions
- define using curly brackes { }
"""

my_set = { 1,2,3,4,5}
my_set

type(my_set)

# add a new value

my_set.add(11)

my_set

my_set.remove(5)

my_set

set1 = { 1,2,3,4,5}
set2 = {2,4,5,6,8,10}

set1.union(set2)

set1.intersection(set2)

set1.difference(set2)



senior_managers (name along the salaries)
employee_name = ["Ahmad", "Usman","Zia", "Zoraiz", "Zubair"]
salary =    [1000, 1500 ,1500, 2000 ,5000]


{"ahmad":1000, "Usman": 1500, "Zia":1500, "Zoriz":2000, "Zubair":5000}

{"ahmad":["Peshawar", 23, 1000], "Usman": 1500, "Zia":1500, "Zoriz":2000, "Zubair":5000}

"""**Dictionary**

- collection of items in form key-value pair
- using curly brackets { key : value}

- Example
    Gradebook
    student_name   scores


    [ahmad, ali, usman] [ 90,98,78]
    {ahmad: 90 , ali:98, usman:78 }
"""

my_dict = { "key": "value"}
my_dict

employee = { "Name": "Ahmad", "Age": 23, "Friends": ["Ali","Usman","Zia"], "Family_tree": {"Sister":"Aliya", "Brother":"Aliyan","Cousin":"zubair"} }
employee

type(employee)

"""### Keys we can have in the dictionary

- string
- int
- tuple
- bool


avoid list and dictionary
"""

my_dict = { 1 : "maimoona", (0,1):"Khilji", True: "1234", False: "mkks"}
my_dict

"""Duplicate keys are not allowed"""

# emoloyee_id : Name

my_dict = { 1 : "maimoona", 2: "Ahmad",3 : "Usman", 2: "Zia" }
my_dict

my_dict[1]

# add a new value, duplicate value exists


my_dict[4]= "Zubair"
my_dict

my_dict = { "name" : "maimoona", "Age": 23,3 : "Usman", 2: "Zia" }
my_dict

employee = { "Name": "Ahmad", "Age": 23, "Friends": ["Ali","Usman","Zia"]}
employee

employee["Friends"][2][0]

# update
employee["Name"] = "Usman"

employee

employee["Friends"][2] = "Zubair"

employee

employee["Age"] += 5   #employee["Age"] = employee["Age"] + 5

employee

# items

employee.items()

# keys to fetch keys or column names
employee.keys()

# values
employee.values()

employee

# remove

employee.pop("Age")  # to remove desired key:value pair

employee

employee.popitem()  # to remove last key:value pair

employee

del employee

employee = {"salary":1000}

employee

employee["salary"] += (employee["salary"] * 0.5)

employee

a = 5
a = a + 10
a += 10

"""1.   Create a tuple to store 1,2,3,4,5 .
      then remove 3 and add 10.
2.   find the index position of 4 in the tuple.
3. A: {1,2,5,8},  B={3,4,2,1,6}
Union, intersection

4. create a dictionary for any scenario.

### Unpacking
"""

name, age, education = "Ahmad", 23, "BS"
print(name)
print(age)
print(education)

a,b = [1,2]
print(a)
print(b)

a,b = (1,2)
print(a)
print(b)

(5 + 2) * 3

"""## Conditional Statements"""



# value is even

num = 3

if num % 2 == 0:
  print(" ")
  print("Even")

# Value is even or not

num = 10

if num % 2 == 0:
  print("Even")

else:
  print("Not even")

# Value is greater than 5 , less than 5 , or equal to 5

num = 5

if num > 5:
  print("Greater than 5")

elif num < 5:
  print("Less than 5")

else:
  print("Equal to 5")

# value is greater than or equal to 5
# value is greater than 5
# value is equal to  5

num = int(input("Enter a number: "))

if  num == 5:
  print("value is 5")

elif num > 5:
  print("Greater than 5")

elif num >=5:
  print("Greater than or equal to 5")

else:
  print("Less than 5")

# voting
# age must be equal to or greater than 18
# you must have cnic

age = int(input("Enter your age: "))
cnic = int(input("Enter 1 if you have CNIC else 0: "))

if age >= 18 and cnic == 1:
  print("You are eligible to vote")

else:
  print("You are not eligible to vote")

# voting
# age must be equal to or greater than 18
# you must have cnic

age = int(input("Enter your age: "))
cnic = int(input("Enter 1 if you have CNIC else 0: "))

if age >= 18:
  if cnic == 1:
    print("You are eligible to vote")

else:
  print("You are not eligible to vote")

num = int(input("Enter a number: "))

if num % 2 == 0 and num % 5 == 0:
  print(num,"is divisible by 2 and 5")

elif num % 2 == 0:
  print(num,"is divisible by 2")

elif num % 5 ==0:
  print(num,"is divisible by 5")

else:
  print(num,"is not divisible by 2 or 5")

# Nested if

# store


item = input("Enter item name (Mobile, laptop,tablet ): ").lower()



if item == "mobile":
  price = int(input("Enter price: "))
  if price <= 10000:
    print("Available")
  else:
    print("Not available")

elif item == "laptop":
  price = int(input("Enter price: "))
  if price <= 20000:
    print("Available")
  else:
    print("Not available")

elif item == "tablet":
  price = int(input("Enter price: "))
  if price <= 5000:
    print("Available")
  else:
    print("Not available")


else:
  print("Item not available")

"a" == "A".lower()

"""**Questions 1.**
 A streaming service stores movie ratings as tuples. You have the following data:

 movie_ratings = ("Inception", 8.8, 2010)


Write a Python program to unpack the tuple and print the movie's title, rating, and release year.


"""



"""**Question 2:**

A teacher wants to maintain a list of students enrolled in two different classes:

class_A = {"John", "Alice", "Bob", "Diana"}
class_B = {"Alice", "Charlie", "Eve", "Bob"}


Write a Python program to find:

- The students enrolled in both classes (intersection).
"""



"""**Question 3**

A grocery store is creating a customer database where each customer has a unique ID. The database is stored as a dictionary, where the key is the customer ID, and the value is a dictionary containing the customer's name and loyalty points:

customers = {
    101: {"name": "Alice", "points": 200},
    102: {"name": "Bob", "points": 350},
    103: {"name": "Charlie", "points": 120}
}


Write a Python program to:

- Add a new customer with ID 104, name "Diana", and 50 loyalty points.
- Increase Bobâ€™s loyalty points by 100.
- Delete the entry for Charlie.
"""



"""**Question 4**
An online store gives customers discounts based on their total purchase amount:

- If the total purchase is more than \$100, they get a 20% discount.
- If the total is between \$50 and \$100, they get a 10% discount.
- If the total is less than \$50, no discount is given.

Write a Python program to calculate the final price after the discount based on the total purchase amount entered by the customer.
"""

